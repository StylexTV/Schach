package de.chess.game;

public class LookupTable {
	
	public static final long[] KNIGHT_MOVES = new long[] {
			132096,
			329728,
			659712,
			1319424,
			2638848,
			5277696,
			10489856,
			4202496,
			33816580,
			84410376,
			168886289,
			337772578,
			675545156,
			1351090312,
			2685403152l,
			1075839008,
			8657044482l,
			21609056261l,
			43234889994l,
			86469779988l,
			172939559976l,
			345879119952l,
			687463207072l,
			275414786112l,
			2216203387392l,
			5531918402816l,
			11068131838464l,
			22136263676928l,
			44272527353856l,
			88545054707712l,
			175990581010432l,
			70506185244672l,
			567348067172352l,
			1416171111120896l,
			2833441750646784l,
			5666883501293568l,
			11333767002587136l,
			22667534005174272l,
			45053588738670592l,
			18049583422636032l,
			145241105196122112l,
			362539804446949376l,
			725361088165576704l,
			1450722176331153408l,
			2901444352662306816l,
			5802888705324613632l,
			-6913025356609880064l,
			4620693356194824192l,
			288234782788157440l,
			576469569871282176l,
			1224997833292120064l,
			2449995666584240128l,
			4899991333168480256l,
			-8646761407372591104l,
			1152939783987658752l,
			2305878468463689728l,
			1128098930098176l,
			2257297371824128l,
			4796069720358912l,
			9592139440717824l,
			19184278881435648l,
			38368557762871296l,
			4679521487814656l,
			9077567998918656l
	};
	
	public static final long[] KING_MOVES = new long[] {
			770,
			1797,
			3594,
			7188,
			14376,
			28752,
			57504,
			49216,
			197123,
			460039,
			920078,
			1840156,
			3680312,
			7360624,
			14721248,
			12599488,
			50463488,
			117769984,
			235539968,
			471079936,
			942159872,
			1884319744,
			3768639488l,
			3225468928l,
			12918652928l,
			30149115904l,
			60298231808l,
			120596463616l,
			241192927232l,
			482385854464l,
			964771708928l,
			825720045568l,
			3307175149568l,
			7718173671424l,
			15436347342848l,
			30872694685696l,
			61745389371392l,
			123490778742784l,
			246981557485568l,
			211384331665408l,
			846636838289408l,
			1975852459884544l,
			3951704919769088l,
			7903409839538176l,
			15806819679076352l,
			31613639358152704l,
			63227278716305408l,
			54114388906344448l,
			216739030602088448l,
			505818229730443264l,
			1011636459460886528l,
			2023272918921773056l,
			4046545837843546112l,
			8093091675687092224l,
			-2260560722335367168l,
			-4593460513685372928l,
			144959613005987840l,
			362258295026614272l,
			724516590053228544l,
			1449033180106457088l,
			2898066360212914176l,
			5796132720425828352l,
			-6854478632857894912l,
			4665729213955833856l
	};
	
	public static final long[] RELEVANT_ROOK_MOVES = new long[] {
			282578800148862l,
			565157600297596l,
			1130315200595066l,
			2260630401190006l,
			4521260802379886l,
			9042521604759646l,
			18085043209519166l,
			36170086419038334l,
			282578800180736l,
			565157600328704l,
			1130315200625152l,
			2260630401218048l,
			4521260802403840l,
			9042521604775424l,
			18085043209518592l,
			36170086419037696l,
			282578808340736l,
			565157608292864l,
			1130315208328192l,
			2260630408398848l,
			4521260808540160l,
			9042521608822784l,
			18085043209388032l,
			36170086418907136l,
			282580897300736l,
			565159647117824l,
			1130317180306432l,
			2260632246683648l,
			4521262379438080l,
			9042522644946944l,
			18085043175964672l,
			36170086385483776l,
			283115671060736l,
			565681586307584l,
			1130822006735872l,
			2261102847592448l,
			4521664529305600l,
			9042787892731904l,
			18085034619584512l,
			36170077829103616l,
			420017753620736l,
			699298018886144l,
			1260057572672512l,
			2381576680245248l,
			4624614895390720l,
			9110691325681664l,
			18082844186263552l,
			36167887395782656l,
			35466950888980736l,
			34905104758997504l,
			34344362452452352l,
			33222877839362048l,
			30979908613181440l,
			26493970160820224l,
			17522093256097792l,
			35607136465616896l,
			9079539427579068672l,
			8935706818303361536l,
			8792156787827803136l,
			8505056726876686336l,
			7930856604974452736l,
			6782456361169985536l,
			4485655873561051136l,
			9115426935197958144l
	};
	
	public static final long[] RELEVANT_BISHOP_MOVES = new long[] {
			18049651735527936l,
			70506452091904l,
			275415828992l,
			1075975168,
			38021120,
			8657588224l,
			2216338399232l,
			567382630219776l,
			9024825867763712l,
			18049651735527424l,
			70506452221952l,
			275449643008l,
			9733406720l,
			2216342585344l,
			567382630203392l,
			1134765260406784l,
			4512412933816832l,
			9024825867633664l,
			18049651768822272l,
			70515108615168l,
			2491752130560l,
			567383701868544l,
			1134765256220672l,
			2269530512441344l,
			2256206450263040l,
			4512412900526080l,
			9024834391117824l,
			18051867805491712l,
			637888545440768l,
			1135039602493440l,
			2269529440784384l,
			4539058881568768l,
			1128098963916800l,
			2256197927833600l,
			4514594912477184l,
			9592139778506752l,
			19184279556981248l,
			2339762086609920l,
			4538784537380864l,
			9077569074761728l,
			562958610993152l,
			1125917221986304l,
			2814792987328512l,
			5629586008178688l,
			11259172008099840l,
			22518341868716544l,
			9007336962655232l,
			18014673925310464l,
			2216338399232l,
			4432676798464l,
			11064376819712l,
			22137335185408l,
			44272556441600l,
			87995357200384l,
			35253226045952l,
			70506452091904l,
			567382630219776l,
			1134765260406784l,
			2832480465846272l,
			5667157807464448l,
			11333774449049600l,
			22526811443298304l,
			9024825867763712l,
			18049651735527936l
	};
	
	public static final long[] ROOK_MAGIC_VALUES = new long[] {
			0xa8002c000108020l, 0x6c00049b0002001l, 0x100200010090040l, 0x2480041000800801l, 0x280028004000800l,
			0x900410008040022l, 0x280020001001080l, 0x2880002041000080l, 0xa000800080400034l, 0x4808020004000l,
			0x2290802004801000l, 0x411000d00100020l, 0x402800800040080l, 0xb000401004208l, 0x2409000100040200l,
			0x1002100004082l, 0x22878001e24000l, 0x1090810021004010l, 0x801030040200012l, 0x500808008001000l,
			0xa08018014000880l, 0x8000808004000200l, 0x201008080010200l, 0x801020000441091l, 0x800080204005l,
			0x1040200040100048l, 0x120200402082l, 0xd14880480100080l, 0x12040280080080l, 0x100040080020080l,
			0x9020010080800200l, 0x813241200148449l, 0x491604001800080l, 0x100401000402001l, 0x4820010021001040l,
			0x400402202000812l, 0x209009005000802l, 0x810800601800400l, 0x4301083214000150l, 0x204026458e001401l,
			0x40204000808000l, 0x8001008040010020l, 0x8410820820420010l, 0x1003001000090020l, 0x804040008008080l,
			0x12000810020004l, 0x1000100200040208l, 0x430000a044020001l, 0x280009023410300l, 0xe0100040002240l,
			0x200100401700l, 0x2244100408008080l, 0x8000400801980l, 0x2000810040200l, 0x8010100228810400l,
			0x2000009044210200l, 0x4080008040102101l, 0x40002080411d01l, 0x2005524060000901l, 0x502001008400422l,
			0x489a000810200402l, 0x1004400080a13l, 0x4000011008020084l, 0x26002114058042l
	};
	
	public static final long[] BISHOP_MAGIC_VALUES = new long[] {
			0x89a1121896040240l, 0x2004844802002010l, 0x2068080051921000l, 0x62880a0220200808l, 0x4042004000000l,
			0x100822020200011l, 0xc00444222012000al, 0x28808801216001l, 0x400492088408100l, 0x201c401040c0084l,
			0x840800910a0010l, 0x82080240060l, 0x2000840504006000l, 0x30010c4108405004l, 0x1008005410080802l,
			0x8144042209100900l, 0x208081020014400l, 0x4800201208ca00l, 0xf18140408012008l, 0x1004002802102001l,
			0x841000820080811l, 0x40200200a42008l, 0x800054042000l, 0x88010400410c9000l, 0x520040470104290l,
			0x1004040051500081l, 0x2002081833080021l, 0x400c00c010142l, 0x941408200c002000l, 0x658810000806011l,
			0x188071040440a00l, 0x4800404002011c00l, 0x104442040404200l, 0x511080202091021l, 0x4022401120400l,
			0x80c0040400080120l, 0x8040010040820802l, 0x480810700020090l, 0x102008e00040242l, 0x809005202050100l,
			0x8002024220104080l, 0x431008804142000l, 0x19001802081400l, 0x200014208040080l, 0x3308082008200100l,
			0x41010500040c020l, 0x4012020c04210308l, 0x208220a202004080l, 0x111040120082000l, 0x6803040141280a00l,
			0x2101004202410000l, 0x8200000041108022l, 0x21082088000l, 0x2410204010040l, 0x40100400809000l,
			0x822088220820214l, 0x40808090012004l, 0x910224040218c9l, 0x402814422015008l, 0x90014004842410l,
			0x1000042304105l, 0x10008830412a00l, 0x2520081090008908l, 0x40102000a0a60140l
	};
	
	public static final int[] ROOK_MAGIC_INDEX_BITS = new int[] {
			12, 11, 11, 11, 11, 11, 11, 12,
			11, 10, 10, 10, 10, 10, 10, 11,
			11, 10, 10, 10, 10, 10, 10, 11,
			11, 10, 10, 10, 10, 10, 10, 11,
			11, 10, 10, 10, 10, 10, 10, 11,
			11, 10, 10, 10, 10, 10, 10, 11,
			11, 10, 10, 10, 10, 10, 10, 11,
			12, 11, 11, 11, 11, 11, 11, 12
	};
	
	public static final int[] BISHOP_MAGIC_INDEX_BITS = {
			6, 5, 5, 5, 5, 5, 5, 6,
			5, 5, 5, 5, 5, 5, 5, 5,
			5, 5, 7, 7, 7, 7, 5, 5,
			5, 5, 7, 9, 9, 7, 5, 5,
			5, 5, 7, 9, 9, 7, 5, 5,
			5, 5, 7, 7, 7, 7, 5, 5,
			5, 5, 5, 5, 5, 5, 5, 5,
			6, 5, 5, 5, 5, 5, 5, 6
	};
	
	public static final long[][] ROOK_MOVES = new long[64][4096];
	public static final long[][] BISHOP_MOVES = new long[64][1024];
	
	public static void initTables() {
		for(int square = 0; square < 64; square++) {
			
			for(int blockerIndex = 0; blockerIndex < (1l << ROOK_MAGIC_INDEX_BITS[square]); blockerIndex++) {
				
				long blockers = getBlockersFromIndex(blockerIndex, RELEVANT_ROOK_MOVES[square]);
				
				int key = (int) ((blockers * ROOK_MAGIC_VALUES[square]) >>> (64 - ROOK_MAGIC_INDEX_BITS[square]));
				
				ROOK_MOVES[square][key] = getRookAttacksSlow(square, blockers);
			}
			
			for(int blockerIndex = 0; blockerIndex < (1l << BISHOP_MAGIC_INDEX_BITS[square]); blockerIndex++) {
				
				long blockers = getBlockersFromIndex(blockerIndex, RELEVANT_BISHOP_MOVES[square]);
				
				int key = (int) ((blockers * BISHOP_MAGIC_VALUES[square]) >>> (64 - BISHOP_MAGIC_INDEX_BITS[square]));
				
				BISHOP_MOVES[square][key] = getBishopAttacksSlow(square, blockers);
			}
		}
	}
	
	private static long getBlockersFromIndex(int index, long mask) {
		long blockers = 0;
		
		int bits = BitOperations.countBits(mask);
		
		for(int i = 0; i < bits; i++) {
	    	int bitPos = BitOperations.bitScanForward(mask);
	    	
	    	mask ^= BoardConstants.BIT_SET[bitPos];
			
			if((index & (1l << i)) != 0) {
				blockers |= (1l << bitPos);
			}
		}
		return blockers;
	}
	
	private static long getRookAttacksSlow(int square, long blockers) {
		long attacks = 0;
		
		attacks |= Ray.getRay(Ray.NORTH, square);
		
		if((Ray.getRay(Ray.NORTH, square) & blockers) != 0) {
			attacks &= ~(Ray.getRay(Ray.NORTH, BitOperations.bitScanForward(Ray.getRay(Ray.NORTH, square) & blockers)));
		}
		
		attacks |= Ray.getRay(Ray.SOUTH, square);
		if((Ray.getRay(Ray.SOUTH, square) & blockers) != 0) {
			attacks &= ~(Ray.getRay(Ray.SOUTH, BitOperations.bitScanBackward(Ray.getRay(Ray.SOUTH, square) & blockers)));
		}
		
		attacks |= Ray.getRay(Ray.EAST, square);
		if((Ray.getRay(Ray.EAST, square) & blockers) != 0) {
			attacks &= ~(Ray.getRay(Ray.EAST, BitOperations.bitScanForward(Ray.getRay(Ray.EAST, square) & blockers)));
		}
		
		attacks |= Ray.getRay(Ray.WEST, square);
		if((Ray.getRay(Ray.WEST, square) & blockers) != 0) {
			attacks &= ~(Ray.getRay(Ray.WEST, BitOperations.bitScanBackward(Ray.getRay(Ray.WEST, square) & blockers)));
		}
		
		return attacks;
	}
	
	private static long getBishopAttacksSlow(int square, long blockers) {
		long attacks = 0;
		
		attacks |= Ray.getRay(Ray.NORTH_WEST, square);
		if((Ray.getRay(Ray.NORTH_WEST, square) & blockers) != 0) {
			attacks &= ~(Ray.getRay(Ray.NORTH_WEST, (BitOperations.bitScanForward(Ray.getRay(Ray.NORTH_WEST, square) & blockers))));
		}
		
		attacks |= Ray.getRay(Ray.NORTH_EAST, square);
		if((Ray.getRay(Ray.NORTH_EAST, square) & blockers) != 0) {
			attacks &= ~(Ray.getRay(Ray.NORTH_EAST, BitOperations.bitScanForward(Ray.getRay(Ray.NORTH_EAST, square) & blockers)));
		}
		
		attacks |= Ray.getRay(Ray.SOUTH_EAST, square);
		if((Ray.getRay(Ray.SOUTH_EAST, square) & blockers) != 0) {
			attacks &= ~(Ray.getRay(Ray.SOUTH_EAST, BitOperations.bitScanBackward(Ray.getRay(Ray.SOUTH_EAST, square) & blockers)));
		}
		
		attacks |= Ray.getRay(Ray.SOUTH_WEST, square);
		if((Ray.getRay(Ray.SOUTH_WEST, square) & blockers) != 0) {
			attacks &= ~(Ray.getRay(Ray.SOUTH_WEST, BitOperations.bitScanBackward(Ray.getRay(Ray.SOUTH_WEST, square) & blockers)));
		}
		
		return attacks;
	}
	
}
